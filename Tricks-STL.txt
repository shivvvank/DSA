::String::
- strcat(char_array1,char_array2) -> appends array
- str1.append(str2) -> accepts string 
- str1+str2 
- int length()	Used to find the string length
- void swap(string& str1)	Used to swap the values of 2 strings
- int compare(const string& str1)	Used to compare 2 strings
- string substr(int position, int length)	Used to create a new string of a given length
- int size()	Used to find the string length in terms of bytes
- void resize(int length)	Used to resize the string length up to the given no. of characters
- string& replace(int pos, int n, string& str1)	Used to replace a portion of the string that begins at position pos and is of the length of n characters
- string& append(const string& str1)	Used to add new characters at the end of a string
- char& at(int position)	Used to access an individual character at the given position
- int find(string& str1, int position, int len)	Used to find the string given in the parameter
- int find_first_of(string& str1, int position, int len)	Used to find the first occurrence of the given sequence
- int find_first_not_of(string& str1, int position, int n)	Used to search the string for the first character that does not match any characters specified in the string
- int find_last_of(string& str1, int position, int n)	Used to search the string for the last character of the sequence specified
- int find_last_not_of(string& str1, int position)	Used to search for the last character that does not match with the sequence specified
- string& insert()	Used to insert a new character before the character indicated at the given position
- int max_size()	Used to get the maximum length of a string
- void push_back(char c)	Used to add a new character at the end of a string
- void pop_back()	Used to remove the string's last character
- string& assign()	Used to assign new value to a string
- int copy(string& str1)	Used to copy the contents of a string into another
- begin()	Used to return the first character's reference
- char& back()	Used to return the last character's reference
- int capacity()	Used to return the allocated space for the string
- void clear()	Used to remove string's all elements
- const_iterator cbegin()	Used to point to the string's first element
- const_iterator cend()	Used to point to the string's last element
- const_reverse_iterator crbegin()	Used to point to the string's last character
- bool empty()	Used to check if the string is empty or not
- string& erase()	Used to remove the characters
- const_char* data()	Used to copy the string's characters into an array
- char& front()	Used to return a reference of the string's first character
- string& operator=()	Used to assign a new value to a string
- string& operator+=()	Used to insert a new character at the end of a string
- char operator[](position)	Used to retrieve a character at the position specified
- int rfind()	Used to search for the string's last occurrence
- iterator end()	Used to reference the string's last character
- reverse_iterator rend()	Used to point to the string's first character
- void shrink_to_fit()	Used to reduce the capacity of the container and make it equal to the size of the string
- char* c_str()	Used to return pointer to an array containing null-terminated character sequence
- const_reverse_iterator crend()	Used to reference the first character of the string
- allocator_type get_allocator();	Used to return the allocated object connected with a string
- reverse_iterator rbegin()	Used to reference the last character of a string
- void reserve(int length)	Used to reserve the vector capacity

::SET:: 
- a.insert(2); //insert element in set
- set<int> a ={0,1,3,2};
- set<int,greater<int>> a ; // use to store in descending order
- set stores in sorted order
- immutable values
- search technique used - Binary Search 
- unindex values in set 
* size() - no of elements 
* max_size() - max no of elements 
* empty() - is empty ?
* begin() - returns an iterator to the beginning - rbegin() - reverse iterator to the last 
* end() - returns an iterator to the end - rend() - reverse iterator to the - before first
* clear() - delete all elements 
* erase(iterator p) - deletes position of iterator
* erase(const g) - delete value g
* lower_bound(const g)
* upper_bound(const g)
* swap() /// 2 sets 
* find(const g)  - returns iterator to the end if not found // set.find(x)!=set.end()
insertion - O(logn) Deletion - O(logn)



Sort Vector of pair based on first value : sort(vect.begin(),vect.end())
Sort Vector of pair based on second value : sort(vect.begin(),vect.end(),sortbysec)
bool sortbysec(const pair<int,int> &a,const pair<int,int> &b)
{
    return (a.second<b.second);
}


Can sort PQ using custom comparator like
int someFunction()
{
    auto compare=[](string a,string b)
    {
        if(a.length()<b.length())
            return true;//for maxheap
        else if(a.length()>b.length())
            return false;// for maxheap
        else
            return a<b;
    }
    priority_queue<string,vector<string>,decltype(compare)> pq(compare);
}

